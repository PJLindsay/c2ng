/**
  *  \file u/t_game_score_loader.cpp
  *  \brief Test for game::score::Loader
  */

#include "game/score/loader.hpp"

#include "t_game_score.hpp"
#include "game/score/turnscorelist.hpp"
#include "afl/string/nulltranslator.hpp"
#include "afl/charset/utf8charset.hpp"
#include "afl/io/constmemorystream.hpp"
#include "game/score/turnscore.hpp"
#include "afl/except/fileproblemexception.hpp"

/** Test a simple file. */
void
TestGameScoreLoader::testSimple()
{
    // planets/c2nu/t2/score.cc:
    //   a score file from c2nu, containing turn 7 and 8, with identical scores.
    static const uint8_t FILE[] = {
        0x43, 0x43, 0x73, 0x74, 0x61, 0x74, 0x30, 0x1a, 0xd6, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00,
        0x14, 0x00, 0x07, 0x00, 0x18, 0x00, 0x26, 0x00, 0xff, 0xff, 0xfe, 0xff, 0xfd, 0xff, 0xfc, 0xff,
        0x02, 0x00, 0xe8, 0x03, 0xe9, 0x03, 0x03, 0x00, 0x4d, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x72, 0x79,
        0x20, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x20, 0x28, 0x4e, 0x75, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xe8, 0x03, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x53, 0x63, 0x6f, 0x72,
        0x65, 0x20, 0x28, 0x4e, 0x75, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0xe9, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x42, 0x75, 0x69, 0x6c,
        0x64, 0x20, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x28, 0x4e, 0x75, 0x29, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x02, 0x00,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0x30, 0x35, 0x2d, 0x32, 0x31, 0x2d, 0x32, 0x30,
        0x31, 0x36, 0x30, 0x39, 0x3a, 0x30, 0x33, 0x3a, 0x35, 0x39, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x30, 0x06, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x55, 0x24,
        0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00,
        0x30, 0x35, 0x2d, 0x32, 0x31, 0x2d, 0x32, 0x30, 0x31, 0x36, 0x30, 0x39, 0x3a, 0x30, 0x33, 0x3a,
        0x35, 0x39, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x67, 0x06,
        0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x32, 0x23, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff
    };

    // TurnScoreList:
    game::score::TurnScoreList list;

    // Load it
    {
        afl::string::NullTranslator tx;
        afl::charset::Utf8Charset cs;
        afl::io::ConstMemoryStream ms(FILE);
        TS_ASSERT_THROWS_NOTHING(game::score::Loader(tx, cs).load(list, ms));
    }

    // Verify it
    TS_ASSERT_EQUALS(list.getNumTurns(), 2U);
    TS_ASSERT_EQUALS(list.getNumScores(), 7U);       // 4 default scores, PBPs, Military, Inventory
    TS_ASSERT_EQUALS(list.getNumDescriptions(), 3U); // PBPs, Military, Inventory
    TS_ASSERT_EQUALS(list.getTurnByIndex(0)->getTurnNumber(), 7);
    TS_ASSERT_EQUALS(list.getTurnByIndex(1)->getTurnNumber(), 8);

    game::score::TurnScore::Slot_t planetSlot, freighterSlot, capitalSlot, baseSlot, pbpSlot, milSlot;
    TS_ASSERT(list.getSlot(game::score::ScoreId_Planets,     planetSlot));
    TS_ASSERT(list.getSlot(game::score::ScoreId_Freighters,  freighterSlot));
    TS_ASSERT(list.getSlot(game::score::ScoreId_Capital,     capitalSlot));
    TS_ASSERT(list.getSlot(game::score::ScoreId_Bases,       baseSlot));
    TS_ASSERT(list.getSlot(game::score::ScoreId_BuildPoints, pbpSlot));
    TS_ASSERT(list.getSlot(1000,                             milSlot));

    // Verify scores
    const game::score::TurnScore* p = list.getTurn(7);
    TS_ASSERT(p != 0);
    TS_ASSERT_EQUALS(p->get(planetSlot,    1).orElse(-1), 3);
    TS_ASSERT_EQUALS(p->get(freighterSlot, 1).orElse(-1), 1);
    TS_ASSERT_EQUALS(p->get(capitalSlot,   1).orElse(-1), 0);
    TS_ASSERT_EQUALS(p->get(baseSlot,      1).orElse(-1), 0);
    TS_ASSERT_EQUALS(p->get(pbpSlot,       1).orElse(-1), 0);
    TS_ASSERT_EQUALS(p->get(milSlot,       1).orElse(-1), 1584);
    TS_ASSERT_EQUALS(p->get(planetSlot,    7).orElse(-1), 5);
    TS_ASSERT_EQUALS(p->get(freighterSlot, 7).orElse(-1), 1);
    TS_ASSERT_EQUALS(p->get(capitalSlot,   7).orElse(-1), 2);
    TS_ASSERT_EQUALS(p->get(baseSlot,      7).orElse(-1), 1);
    TS_ASSERT_EQUALS(p->get(pbpSlot,       7).orElse(-1), 0);
    TS_ASSERT_EQUALS(p->get(milSlot,       7).orElse(-1), 9301);

    p = list.getTurn(8);
    TS_ASSERT(p != 0);
    TS_ASSERT_EQUALS(p->get(planetSlot,    1).orElse(-1), 3);
    TS_ASSERT_EQUALS(p->get(freighterSlot, 1).orElse(-1), 1);
    TS_ASSERT_EQUALS(p->get(capitalSlot,   1).orElse(-1), 0);
    TS_ASSERT_EQUALS(p->get(baseSlot,      1).orElse(-1), 0);
    TS_ASSERT_EQUALS(p->get(pbpSlot,       1).orElse(-1), 0);
    TS_ASSERT_EQUALS(p->get(milSlot,       1).orElse(-1), 1639);
    TS_ASSERT_EQUALS(p->get(planetSlot,    7).orElse(-1), 5);
    TS_ASSERT_EQUALS(p->get(freighterSlot, 7).orElse(-1), 1);
    TS_ASSERT_EQUALS(p->get(capitalSlot,   7).orElse(-1), 2);
    TS_ASSERT_EQUALS(p->get(baseSlot,      7).orElse(-1), 1);
    TS_ASSERT_EQUALS(p->get(pbpSlot,       7).orElse(-1), 0);
    TS_ASSERT_EQUALS(p->get(milSlot,       7).orElse(-1), 9010);

    // Verify descriptions
    const game::score::TurnScoreList::Description* desc = list.getDescription(1000);
    TS_ASSERT(desc != 0);
    TS_ASSERT_EQUALS(desc->name, "Military Score (Nu)");
    TS_ASSERT_EQUALS(desc->scoreId, 1000);
    TS_ASSERT_EQUALS(desc->turnLimit, -1);
    TS_ASSERT_EQUALS(desc->winLimit, -1);

    desc = list.getDescription(1001);
    TS_ASSERT(desc != 0);
    TS_ASSERT_EQUALS(desc->name, "Inventory Score (Nu)");
    TS_ASSERT_EQUALS(desc->scoreId, 1001);
    TS_ASSERT_EQUALS(desc->turnLimit, -1);
    TS_ASSERT_EQUALS(desc->winLimit, -1);
}

/** Test some errors. */
void
TestGameScoreLoader::testErrors()
{
    // Environment
    afl::string::NullTranslator tx;
    afl::charset::Utf8Charset cs;
    game::score::Loader testee(tx, cs);

    // Truncated file
    {
        static const uint8_t FILE[] = {
            0x43, 0x43, 0x73, 0x74, 0x61, 0x74, 0x30, 0x1a, 0xd6, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00,
            0x14, 0x00, 0x07, 0x00, 0x18, 0x00, 0x26, 0x00, 0xff, 0xff, 0xfe, 0xff, 0xfd, 0xff, 0xfc, 0xff,
            0x02, 0x00, 0xe8, 0x03, 0xe9, 0x03, 0x03, 0x00, 0x4d, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x72, 0x79,
            0x20, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x20, 0x28, 0x4e, 0x75, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xe8, 0x03, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x53, 0x63, 0x6f, 0x72,
        };
        game::score::TurnScoreList list;
        afl::io::ConstMemoryStream ms(FILE);
        TS_ASSERT_THROWS(testee.load(list, ms), afl::except::FileProblemException);
    }

    // Truncated signature
    {
        static const uint8_t FILE[] = { 0x43, 0x43, 0x73, 0x74, 0x61, 0x74, 0x30 };
        game::score::TurnScoreList list;
        afl::io::ConstMemoryStream ms(FILE);
        TS_ASSERT_THROWS(testee.load(list, ms), afl::except::FileProblemException);
    }

    // Truncated header
    {
        static const uint8_t FILE[] = { 0x43, 0x43, 0x73, 0x74, 0x61, 0x74, 0x30, 0x1a, 0xd6, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00 };
        game::score::TurnScoreList list;
        afl::io::ConstMemoryStream ms(FILE);
        TS_ASSERT_THROWS(testee.load(list, ms), afl::except::FileProblemException);
    }

    // Future file
    {
        static const uint8_t FILE[] = { 0x43, 0x43, 0x73, 0x74, 0x61, 0x74, 0x39, 0x1a, 0xd6, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00 };
        game::score::TurnScoreList list;
        afl::io::ConstMemoryStream ms(FILE);
        TS_ASSERT_THROWS(testee.load(list, ms), afl::except::FileProblemException);
    }
}

